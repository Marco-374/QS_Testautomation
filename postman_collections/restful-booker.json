{
	"info": {
		"_postman_id": "0f602742-5c1c-4e84-bb15-bbe3c29e9f42",
		"name": "Restful-Booker",
		"description": "# Welcome to Restful-Booker!\n\n***Can you find all the bugs in this API?***\n\nWelcome to Restful-booker an API that you can use to learn more about API Testing or try out API testing tools against. Restful-booker is a **C**reate **R**ead **U**pdate **D**elete Web API that comes with authentication features and loaded with a bunch of bugs for you to explore.\n\n## Where is the API?\n\nYou can find the code for Restful-booker on GitHub here: [https://github.com/mwinteringham/restful-booker](https://github.com/mwinteringham/restful-booker)\n\nYou can find a deployed instance at [https://restful-booker.herokuapp.com/](https://restful-booker.herokuapp.com/)\n\nThe API comes pre-loaded with 10 records for you to work with **and resets itself every 10 minutes back to that default state.** It also comes with [detailed API documentation](https://restful-booker.herokuapp.com/apidoc/index.html) to help get you started with your API testing straight away.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "UpdateBooking",
			"item": [
				{
					"name": "/booking/:id - UpdateBooking (JSON)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f4dea90-9a8f-403c-8418-6e649fa3b68e",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: pm.collectionVariables.get(\"new_booking\")\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f46b241-227c-49b9-886f-447d27cd4c0e",
								"exec": [
									"const updatedBooking = {\r",
									"    \"firstname\": \"Erika\",\r",
									"    \"lastname\": \"Musterfrau\",\r",
									"    \"totalprice\": 222,\r",
									"    \"depositpaid\": false,\r",
									"    \"bookingdates\": {\r",
									"      \"checkin\": \"2023-01-01\",\r",
									"      \"checkout\": \"2023-01-10\"\r",
									"    },\r",
									"    \"additionalneeds\": \"Fastbreak\"     \r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response booking is correct\", function () {\r",
									"    var data = pm.response.json();\r",
									"    var expectedBooking = updatedBooking;\r",
									"    pm.expect(data.firstname).to.eql(expectedBooking.firstname);\r",
									"    pm.expect(data.lastname).to.eql(expectedBooking.lastname);\r",
									"    pm.expect(data.totalprice).to.eql(expectedBooking.totalprice);\r",
									"    pm.expect(data.depositpaid).to.eql(expectedBooking.depositpaid);\r",
									"    pm.expect(data.bookingdates.checkin).to.eql(expectedBooking.bookingdates.checkin);\r",
									"    pm.expect(data.bookingdates.checkout).to.eql(expectedBooking.bookingdates.checkout);\r",
									"    pm.expect(data.additionalneeds).to.eql(expectedBooking.additionalneeds);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f403693e-5396-4191-946b-4f753107da07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\": \"Erika\",\n    \"lastname\": \"Musterfrau\",\n    \"totalprice\": 222,\n    \"depositpaid\": false,\n    \"bookingdates\": {\n      \"checkin\": \"2023-01-01\",\n      \"checkout\": \"2023-01-10\"\n    },\n    \"additionalneeds\": \"Fastbreak\"     \n}\n"
						},
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to update a complete Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				},
				{
					"name": "/booking/:id - Update with missing parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f4dea90-9a8f-403c-8418-6e649fa3b68e",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: pm.collectionVariables.get(\"new_booking\")\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f46b241-227c-49b9-886f-447d27cd4c0e",
								"exec": [
									"    \r",
									"pm.test(\"Update with missing parameters has status code 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"    pm.expect(pm.response.status).to.be.equal(\"Bad Request\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c11bfd77-eca7-40c8-8916-d79c67fb4ea7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\": \"Erika\",\n    \"depositpaid\": false,\n    \"bookingdates\": {\n      \"checkin\": \"2023-01-01\",\n      \"checkout\": \"2023-01-10\"\n    },\n    \"additionalneeds\": \"Fastbreak\"     \n}\n"
						},
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to update a complete Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				},
				{
					"name": "/booking/:id - Update with wrong parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f4dea90-9a8f-403c-8418-6e649fa3b68e",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: pm.collectionVariables.get(\"new_booking\")\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f46b241-227c-49b9-886f-447d27cd4c0e",
								"exec": [
									"\r",
									"var data = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"    pm.expect(pm.response.status).to.be.equal(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking has not changed\", function () {\r",
									"    var expectedBooking = JSON.parse(pm.collectionVariables.get(\"new_booking\"))\r",
									"    pm.expect(data.firstname).to.eql(expectedBooking.firstname);\r",
									"    pm.expect(data.lastname).to.eql(expectedBooking.lastname);\r",
									"    pm.expect(data.bookingdates.checkin).to.eql(expectedBooking.bookingdates.checkin);\r",
									"    pm.expect(data.bookingdates.checkout).to.eql(expectedBooking.bookingdates.checkout);\r",
									"    pm.expect(data.additionalneeds).to.eql(expectedBooking.additionalneeds);\r",
									"    pm.expect(data.depositpaid).to.eql(expectedBooking.depositpaid);\r",
									"    pm.expect(data.totalprice).to.eql(expectedBooking.totalprice);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f4537c79-d3e4-4f33-9d0e-3caa13dc4a9c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\": \"\",\n    \"lastname\": \"\",\n    \"totalprice\": \"xy\",\n    \"depositpaid\": \"z\",\n    \"bookingdates\": {\n      \"checkin\": \"2013-01-01\",\n      \"checkout\": \"trt\"\n    },\n    \"additionalneeds\": true     \n}\n"
						},
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to update a complete Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				},
				{
					"name": "/booking/:id - Update deleted Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b90bf07c-c29f-4d9f-b08a-65c4cae9d859",
								"exec": [
									"// delete booking if exists\r",
									"const deleteBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking/\" + pm.collectionVariables.get(\"booking_id\"),\r",
									"  method: 'DELETE',\r",
									"  header: 'Authorization: Basic ' + btoa('admin:password123')\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteBooking, function (err, response) {\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b14747b0-9c87-49d3-9feb-da8507ed5f15",
								"exec": [
									"\r",
									"pm.test(\"Update non existing booking returns 405\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(405);\r",
									"    pm.expect(pm.response.status).to.be.equal(\"Method Not Allowed\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "98e8a576-59aa-47eb-9670-104242900b5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Erika\",\r\n    \"lastname\": \"Musterfrau\",\r\n    \"totalprice\": 222,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\": {\r\n      \"checkin\": \"2023-01-01\",\r\n      \"checkout\": \"2023-01-10\"\r\n    },\r\n    \"additionalneeds\": \"Fastbreak\"     \r\n}"
						},
						"url": "{{host}}/booking/{{booking_id}}"
					},
					"response": []
				},
				{
					"name": "/booking/:id - Update booking without Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b90bf07c-c29f-4d9f-b08a-65c4cae9d859",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b14747b0-9c87-49d3-9feb-da8507ed5f15",
								"exec": [
									"\r",
									"pm.test(\"Update booking without auth returns 403\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(403);\r",
									"    pm.expect(pm.response.status).to.be.equal(\"Forbidden\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "355e61fb-25ed-4251-88a5-a5cd6d7140c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Erika\",\r\n    \"lastname\": \"Musterfrau\",\r\n    \"totalprice\": 222,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\": {\r\n      \"checkin\": \"2023-01-01\",\r\n      \"checkout\": \"2023-01-10\"\r\n    },\r\n    \"additionalneeds\": \"Fastbreak\"     \r\n}"
						},
						"url": "{{host}}/booking/{{booking_id}}"
					},
					"response": []
				}
			],
			"id": "c774f320-1888-46d7-9d44-ef6096e2339e"
		},
		{
			"name": "CreateBooking",
			"item": [
				{
					"name": "/booking - CreateBooking (JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1085f03-344b-49ae-9504-04db92170763",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response booking is correct\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.bookingid).to.be.a(\"number\");\r",
									"    var expectedBooking = JSON.parse(pm.collectionVariables.get(\"new_booking\"));\r",
									"    pm.expect(data.booking.firstname).to.eql(expectedBooking.firstname);\r",
									"    pm.expect(data.booking.lastname).to.eql(expectedBooking.lastname);\r",
									"    pm.expect(data.booking.totalprice).to.eql(expectedBooking.totalprice);\r",
									"    pm.expect(data.booking.depositpaid).to.eql(expectedBooking.depositpaid);\r",
									"    pm.expect(data.booking.bookingdates.checkin).to.eql(expectedBooking.bookingdates.checkin);\r",
									"    pm.expect(data.booking.bookingdates.checkout).to.eql(expectedBooking.bookingdates.checkout);\r",
									"    pm.expect(data.booking.additionalneeds).to.eql(expectedBooking.additionalneeds);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4752668a-2685-44d2-820f-6b5d2fb0304b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{new_booking}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/booking",
						"description": "Request that allows you to create a Booking within the API. This request creates the booking using JSON."
					},
					"response": []
				},
				{
					"name": "/booking - CreateBooking with wrong parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1085f03-344b-49ae-9504-04db92170763",
								"exec": [
									"pm.test(\"Creation with wrong parameters has status code 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(400);\r",
									"    pm.expect(pm.response.status).to.be.equal(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b6370e8-1b4d-43e8-b2e6-e0778750727a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{wrong_booking}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/booking",
						"description": "Request that allows you to create a Booking within the API. This request creates the booking using JSON."
					},
					"response": []
				},
				{
					"name": "/booking - CreateBooking with empty parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1085f03-344b-49ae-9504-04db92170763",
								"exec": [
									"pm.test(\"Create empty booking has status code 500\", function () {\r",
									"        pm.expect(pm.response.code).to.be.equal(500);\r",
									"        pm.expect(pm.response.status).to.be.equal(\"Internal Server Error\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3323904f-e3d3-4c08-8e5a-6257270d5f6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/booking",
						"description": "Request that allows you to create a Booking within the API. This request creates the booking using JSON."
					},
					"response": []
				}
			],
			"id": "d027aa18-29f3-4293-835e-f5e5f20720d6"
		},
		{
			"name": "DeleteBooking",
			"item": [
				{
					"name": "/booking/:id - DeleteBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffdb0a20-47f2-4f09-b960-d76bb93d179b",
								"exec": [
									"// create the base booking\r",
									"const createBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: pm.collectionVariables.get(\"new_booking\")\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "836ad683-1f44-4922-aa9c-5bd646f47888",
								"exec": [
									"pm.test(\"Status code name has string 'Created'\", function () {\r",
									"  pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// try to GET deleted booking\r",
									"const getBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking/\" + pm.collectionVariables.get(\"booking_id\"),\r",
									"  method: 'GET',\r",
									"  header: 'Content-Type:application/json'\r",
									"};\r",
									"\r",
									"pm.sendRequest(getBooking, function (err, response) {\r",
									"    pm.test(\"Get request with deleted bookingId returns 404\", function () {\r",
									"        pm.expect(response.code).to.be.equal(404);\r",
									"        pm.expect(response.status).to.be.equal(\"Not Found\")\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5f39fd47-b68f-48fc-95a0-48ad47817f90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to delete a Booking within the API.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				},
				{
					"name": "/booking/:id - DeleteBooking with already deleted booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffdb0a20-47f2-4f09-b960-d76bb93d179b",
								"exec": [
									"// delete booking\r",
									"const deleteBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking/\" + pm.collectionVariables.get(\"booking_id\"),\r",
									"  method: 'DELETE',\r",
									"  header: 'Authorization: Basic ' + btoa('admin:password123')\r",
									"};\r",
									"pm.sendRequest(deleteBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "836ad683-1f44-4922-aa9c-5bd646f47888",
								"exec": [
									"// try to delete a non existing (already deleted) booking \r",
									"pm.test(\"Delete non existing booking returns 405\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(405);\r",
									"    pm.expect(pm.response.status).to.be.equal(\"Method Not Allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "506fbb5f-28bf-49c7-b0a7-e092ea03f75e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to delete a Booking within the API.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				},
				{
					"name": "/booking/:id - DeleteBooking without auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffdb0a20-47f2-4f09-b960-d76bb93d179b",
								"exec": [
									"// create the base booking\r",
									"const createBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: pm.collectionVariables.get(\"new_booking\")\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "836ad683-1f44-4922-aa9c-5bd646f47888",
								"exec": [
									"pm.test(\"Delete without authorization returns 403\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(403);\r",
									"    pm.expect(pm.response.status).to.be.equal(\"Forbidden\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "309b3ce6-8a88-4d0d-be4f-b1c7233f2586",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to delete a Booking within the API.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				}
			],
			"id": "1342371a-25af-4a15-a327-86fc9ce94d51"
		},
		{
			"name": "CreateToken",
			"item": [
				{
					"name": "/auth - CreateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c95eb4d-be9e-4ea0-b656-ecefa07ab78b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f0937860-1da1-47d6-b8f7-0274a070dc83",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}"
						},
						"url": "{{host}}/auth",
						"description": "Sending a request to this endpoint will generate a token that can be used in the Cookie header for PUT /booking/{id} and DELETE /booking/{id}"
					},
					"response": []
				},
				{
					"name": "/auth - CreateToken wrong credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c95eb4d-be9e-4ea0-b656-ecefa07ab78b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains reason 'Bad credentials'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.reason).to.eql(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "57892ab8-dfdd-4956-b1de-a766ea99f9f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"wrong_admin\",\n    \"password\" : \"password123\"\n}"
						},
						"url": "{{host}}/auth",
						"description": "Sending a request to this endpoint will generate a token that can be used in the Cookie header for PUT /booking/{id} and DELETE /booking/{id}"
					},
					"response": []
				}
			],
			"id": "11320d55-20cd-4fc1-979b-e1cc5efde2b2"
		},
		{
			"name": "GetBooking",
			"item": [
				{
					"name": "/booking - GetBookingIds (Query all IDs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee56ad3e-f360-42af-a248-1a018af354dd",
								"exec": [
									"pm.test(\"Response has to be status 200\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has to be an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response array length has to be > 0\", function () {\r",
									"    pm.expect(pm.response.json().length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have to inlcude only one key\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(Object.keys(element).length).to.be.equal(1);\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have to inlcude the key bookingid\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(element).to.have.property('bookingid');\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements values have to be numbers\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(element.bookingid).to.be.a('number');\r",
									"    }    \r",
									"});\r",
									"\r",
									"// pm.test(\"Response array has to be empty\", ()=>{\r",
									"//   for(const element of pm.response.json()){\r",
									"//         pm.sendRequest({            \r",
									"//             url: 'https://restful-booker.herokuapp.com/booking/' + element.bookingid,\r",
									"//             method: 'DELETE',\r",
									"//             header: {\r",
									"//                 'Content-Type': 'application/json',\r",
									"//                 },\r",
									"//             body: {}    \r",
									"//         }, function (err, response) {    \r",
									"           \r",
									"//         })\r",
									"//     }\r",
									"//      pm.sendRequest({            \r",
									"//                 url: 'https://restful-booker.herokuapp.com/booking',\r",
									"//                 method: 'GET',\r",
									"//                 header: {\r",
									"//                     'Content-Type': 'application/json',\r",
									"//                     },\r",
									"//                 body: {}    \r",
									"//             }, function (err, response) {    \r",
									"//                 pm.expect(response.json().length).to.be.eq(0)\r",
									"//             })\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c5d78c4d-ecaa-4014-8f75-05f4d1842b3f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/booking",
						"description": "Requests the IDs for all existing bookings that exist within the API"
					},
					"response": []
				},
				{
					"name": "/booking - GetBookingIds (Filter by name)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3aa41c1-9192-4518-8229-e0ead4913e50",
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://restful-booker.herokuapp.com/booking',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"          },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({    \"firstname\": \"Harry\",\r",
									"    \"lastname\": \"Potter\",\r",
									"    \"totalprice\": 999,\r",
									"    \"depositpaid\": true,\r",
									"    \"bookingdates\": {\r",
									"      \"checkin\": \"2018-01-01\",\r",
									"      \"checkout\": \"2019-01-01\"\r",
									"    },\r",
									"    \"additionalneeds\": \"Winkelgasse\"})\r",
									"    }    \r",
									"}, function (err, response) {\r",
									"    //console.error(err);\r",
									"    //console.log(response.json());\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "25c791fa-f077-4f2f-9929-747f7bdaa7fb",
								"exec": [
									"pm.test(\"Response has to be status 200\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has to be an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have to inlcude only one key\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(Object.keys(element).length).to.be.equal(1);\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have to inlcude the key bookingid\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(element).to.have.property('bookingid');\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have values have to be numbers\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(element.bookingid).to.be.a('number');\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have to have corresponding bookings with data 'Harry Potter'\", function () {    \r",
									"    for(const element of pm.response.json()){\r",
									"        //console.log(element.bookingid);\r",
									"        pm.sendRequest({            \r",
									"    url: 'https://restful-booker.herokuapp.com/booking/' + element.bookingid,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"          },\r",
									"    body: {}    \r",
									"}, function (err, response) {    \r",
									"    pm.expect((response.json()).firstname).to.be.equal(\"Harry\");\r",
									"    pm.expect((response.json()).lastname).to.be.equal(\"Potter\");\r",
									"})\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array has to be empty\", ()=>{\r",
									"    pm.sendRequest({            \r",
									"            url: 'https://restful-booker.herokuapp.com/booking?firstname=*&lastname=§',\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                },\r",
									"            body: {}    \r",
									"        }, function (err, response) { \r",
									"            pm.expect(response.json().length).to.be.equal(0);\r",
									"  })\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"Response array has to be empty\", ()=>{\r",
									"    const fail = {abc: 123}\r",
									"    pm.sendRequest({            \r",
									"            url: `https://restful-booker.herokuapp.com/booking?firstname=${fail}&lastname=${fail}`,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                },\r",
									"            body: {}    \r",
									"        }, function (err, response) { \r",
									"             pm.expect(response.json().length).to.be.equal(0);\r",
									"  })\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b9dc92d0-3bfc-4113-bac7-57ad5f75c22a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/booking?firstname=Harry&lastname=Potter",
							"host": [
								"{{host}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Harry"
								},
								{
									"key": "lastname",
									"value": "Potter"
								}
							]
						},
						"description": "Requests all Booking IDs that match the firstname AND lastname provided in the query string. You can also query by firstname or lastname alone."
					},
					"response": []
				},
				{
					"name": "/booking - GetBookingIds (Filter by date)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1b1eb01-69bf-4769-9b38-0d87a5ec345b",
								"exec": [
									"pm.test(\"Response has to be status 200\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has to be an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have to inlcude only one key\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(Object.keys(element).length).to.be.equal(1);\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have to inlcude the key bookingid\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(element).to.have.property('bookingid');\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have values have to be numbers\", function () {\r",
									"    for(const element of pm.response.json()){\r",
									"        pm.expect(element.bookingid).to.be.a('number');\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array elements have to have corresponding bookings with data 'Harry Potter'\", function () {    \r",
									"    for(const element of pm.response.json()){\r",
									"        console.log(element.bookingid);\r",
									"        pm.sendRequest({            \r",
									"    url: 'https://restful-booker.herokuapp.com/booking/' + element.bookingid,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"          },\r",
									"    body: {}    \r",
									"}, function (err, response) {    \r",
									"    pm.expect((response.json()).firstname).to.be.equal(\"Harry\");\r",
									"    pm.expect((response.json()).lastname).to.be.equal(\"Potter\");\r",
									"})\r",
									"    }    \r",
									"});\r",
									"\r",
									"pm.test(\"Response array has to be empty\", ()=>{\r",
									"    pm.sendRequest({            \r",
									"            url: 'https://restful-booker.herokuapp.com/booking?checkin=1-01-01&checkout=1-01-02',\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                },\r",
									"            body: {}    \r",
									"        }, function (err, response) { \r",
									"            pm.expect(response.json().length).to.be.equal(0);\r",
									"  })   \r",
									"});\r",
									"\r",
									"pm.test(\"Response hast to fail with internal server error\", ()=>{\r",
									"    const fail = {abc: 123}\r",
									"    pm.sendRequest({            \r",
									"            url: `https://restful-booker.herokuapp.com/booking?checkin=abc&checkout=${fail}`,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                },\r",
									"            body: {}    \r",
									"        }, function (err, response) { \r",
									"             //console.log(response.json())\r",
									"             pm.expect(response).to.be.serverError;\r",
									"  })\r",
									"   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e24f6a3f-5022-4754-9c23-5d44ac9e6629",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/booking?checkin=1972-01-01&checkout=1973-01-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "1972-01-01"
								},
								{
									"key": "checkout",
									"value": "1973-01-31"
								}
							]
						},
						"description": "Requests all Booking IDs that are within the checkin AND checkout provided in the query string. You can also query by checking or checkout alone."
					},
					"response": []
				},
				{
					"name": "/booking/:id - GetBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "644db54b-1929-4bc9-a15e-9419e09ff2bb",
								"exec": [
									"pm.test(\"Response has to be status 200\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has to be json\", function () {\r",
									"    pm.response.to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has to have the corresponding name 'Harry Potter'\", function () {\r",
									"   pm.expect((pm.response.json()).firstname).to.be.equal(\"Harry\");\r",
									"   pm.expect((pm.response.json()).lastname).to.be.equal(\"Potter\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has to fail\", ()=>{\r",
									"    pm.sendRequest({            \r",
									"            url: 'https://restful-booker.herokuapp.com/booking/-1',\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                },\r",
									"            body: {}    \r",
									"        }, function (err, response) { \r",
									"            //console.log(response.json())\r",
									"            pm.expect(response).to.be.notFound;\r",
									"  })   \r",
									"});\r",
									"\r",
									"pm.test(\"Response has to fail\", ()=>{\r",
									"    pm.sendRequest({            \r",
									"            url: 'https://restful-booker.herokuapp.com/booking/abc',\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                },\r",
									"            body: {}    \r",
									"        }, function (err, response) { \r",
									"            //console.log(response.json())\r",
									"            pm.expect(response).to.be.notFound;\r",
									"  })   \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "36a9830d-5391-4e17-abc4-68ddce32a986",
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://restful-booker.herokuapp.com/booking',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"          },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({    \r",
									"            \"firstname\": \"Harry\",\r",
									"            \"lastname\": \"Potter\",\r",
									"            \"totalprice\": 999,\r",
									"            \"depositpaid\": true,\r",
									"            \"bookingdates\": {\r",
									"            \"checkin\": \"1972-01-01\",\r",
									"            \"checkout\": \"1973-01-01\"\r",
									"            },\r",
									"            \"additionalneeds\": \"Winkelgasse\"})\r",
									"            }    \r",
									"}, function (err, response) {\r",
									"    //console.error(err);\r",
									"    //console.log(response.json());\r",
									"    pm.environment.set(\"booking_id\", response.json().bookingid);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5666caf6-9e57-465a-bb4e-11311c3cab60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Requests a specific booking that exists within the API. To get a list of valid booking IDs using GetBookingIds calls."
					},
					"response": []
				}
			],
			"id": "922c5ad0-b190-4cac-90d8-d345af8f4548"
		},
		{
			"name": "PatchBooking",
			"item": [
				{
					"name": "/booking/:id - PartialUpdateBooking (JSON)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "579fbc47-542e-468b-a45c-f42791c7ef66",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: pm.collectionVariables.get(\"new_booking\")\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a6c4156-1a6a-4842-bdfc-48c79fe48ace",
								"exec": [
									"const updatedBooking = {\r",
									"    \"firstname\": \"Erika\",\r",
									"    \"lastname\": \"Musterfrau\",\r",
									"    \"totalprice\": 222,\r",
									"    \"depositpaid\": true,\r",
									"    \"bookingdates\": {\r",
									"        \"checkin\":\"2022-01-01\",\r",
									"        \"checkout\":\"2022-01-10\"  \r",
									"    },\r",
									"    \"additionalneeds\": \"Breakfast\"\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response booking is correct\", function () {\r",
									"    var data = pm.response.json();\r",
									"    var expectedBooking = updatedBooking;\r",
									"    pm.expect(data.firstname).to.eql(expectedBooking.firstname);\r",
									"    pm.expect(data.lastname).to.eql(expectedBooking.lastname);\r",
									"    pm.expect(data.totalprice).to.eql(expectedBooking.totalprice);\r",
									"    expectedBooking = JSON.parse(pm.collectionVariables.get(\"new_booking\"));\r",
									"    pm.expect(data.depositpaid).to.eql(expectedBooking.depositpaid);\r",
									"    pm.expect(data.bookingdates.checkin).to.eql(expectedBooking.bookingdates.checkin);\r",
									"    pm.expect(data.bookingdates.checkout).to.eql(expectedBooking.bookingdates.checkout);\r",
									"    pm.expect(data.additionalneeds).to.eql(expectedBooking.additionalneeds);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee3aa7fb-31c0-4551-8fac-ed5a29e73522",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Erika\",\n    \"lastname\" : \"Musterfrau\",\n    \"totalprice\": 222\n\n}"
						},
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to update a partial section of a Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				},
				{
					"name": "/booking/:id - PartialUpdateBooking with wrong parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "579fbc47-542e-468b-a45c-f42791c7ef66",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: pm.collectionVariables.get(\"new_booking\")\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a6c4156-1a6a-4842-bdfc-48c79fe48ace",
								"exec": [
									"const updatedBooking = {\r",
									"    \"firstname\": \"Erika\",\r",
									"    \"lastname\": \"Musterfrau\",\r",
									"    \"totalprice\": 111,\r",
									"    \"depositpaid\": true,\r",
									"    \"bookingdates\": {\r",
									"        \"checkin\":\"2022-01-01\",\r",
									"        \"checkout\":\"2022-01-10\"  \r",
									"    },\r",
									"    \"additionalneeds\": \"Breakfast\"\r",
									"};\r",
									"\r",
									"// try updating with wrong parameter\r",
									"pm.test(\"Update with wrong parameters to be forbidden\", function () {    \r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: `https://restful-booker.herokuapp.com/booking/${pm.collectionVariables.get(\"booking_id\")}`,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                },\r",
									"            body: {}  \r",
									"        }, function (err, response2) {\r",
									"        //pm.test(\"Update with wrong parameters does not change booking\", function () {\r",
									"            var data = response2.json();\r",
									"            var expectedBooking = pm.response.json();\r",
									"            pm.expect(data.firstname).to.eql(expectedBooking.firstname);\r",
									"            pm.expect(data.lastname).to.eql(expectedBooking.lastname);\r",
									"            pm.expect(data.totalprice).to.eql(expectedBooking.totalprice);\r",
									"\r",
									"            expectedBooking = JSON.parse(pm.collectionVariables.get(\"new_booking\"));\r",
									"            pm.expect(data.depositpaid).to.eql(expectedBooking.depositpaid);\r",
									"            pm.expect(data.bookingdates.checkin).to.eql(expectedBooking.bookingdates.checkin);\r",
									"            pm.expect(data.bookingdates.checkout).to.eql(expectedBooking.bookingdates.checkout);\r",
									"            pm.expect(data.additionalneeds).to.eql(expectedBooking.additionalneeds);\r",
									"        });\r",
									"        pm.test(\"Update with wrong parameters is OK\", function () {\r",
									"            pm.expect(pm.response).to.be.success;\r",
									"        });\r",
									"    });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8776a4c2-5d92-4c43-b409-f67b514b453f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\": \"Erika\",\n    \"lastname\": \"Musterfrau\",\n    \"totalprice\": 333,        \n    \"wrongParam\": \"xyz\"\n}"
						},
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to update a partial section of a Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				},
				{
					"name": "/booking/:id - PartialUpdateBooking non existing booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "579fbc47-542e-468b-a45c-f42791c7ef66",
								"exec": [
									"const deleteBooking = {\r",
									"    url: pm.collectionVariables.get(\"host\") + \"/booking/\" + pm.collectionVariables.get(\"booking_id\"),\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'content-type': 'application/json',\r",
									"        'authorization': request.headers[\"authorization\"]\r",
									"    },\r",
									"};\r",
									"\r",
									" pm.sendRequest(deleteBooking, function (err, response) {   \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a6c4156-1a6a-4842-bdfc-48c79fe48ace",
								"exec": [
									"\r",
									"// try to update a non existing booking \r",
									"pm.test(\"Update non existing booking returns 405\", function () {\r",
									"            pm.expect(pm.response.code).to.be.equal(405);\r",
									"            pm.expect(pm.response.status).to.be.equal(\"Method Not Allowed\")            \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1a999eeb-3aa7-4340-bb22-dea43ac080bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Erika\",\n    \"lastname\" : \"Musterfrau\"\n}"
						},
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to update a partial section of a Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				},
				{
					"name": "/booking/:id - PartialUpdateBooking without auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "579fbc47-542e-468b-a45c-f42791c7ef66",
								"exec": [
									"const createBooking = {\r",
									"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
									"  method: 'POST',\r",
									"  header: 'Content-Type:application/json',\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: pm.collectionVariables.get(\"new_booking\")\r",
									"  }\r",
									"};\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.expect(err).is.null;\r",
									"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a6c4156-1a6a-4842-bdfc-48c79fe48ace",
								"exec": [
									"\r",
									"    pm.test(\"Update without authorization returns 403\", function () {\r",
									"        pm.expect(pm.response.code).to.be.equal(403);\r",
									"        pm.expect(pm.response.status).to.be.equal(\"Forbidden\")\r",
									"    });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "745dd0d5-fd10-4fff-9031-356c336e8b7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Erika\",\n    \"lastname\" : \"Musterfrau\"\n}"
						},
						"url": "{{host}}/booking/{{booking_id}}",
						"description": "Request that allows you to update a partial section of a Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
					},
					"response": []
				}
			],
			"id": "4c5b2e49-642d-4188-98b9-74078a8ed4bc"
		},
		{
			"name": "/ping - HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84101e73-eca2-4e88-b25c-7d2b97e1d97e",
						"exec": [
							"pm.test(\"Ping is successful\", function () {\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string 'Created'\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2a5d3cd1-de4c-473d-9800-276c869868ab",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{host}}/ping",
				"description": "A simple GET request that informs us whether the API is up and running."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7414924f-1cd9-4558-b169-2246040adeed",
				"type": "text/javascript",
				"exec": [
					"var booking = {",
					"    \"firstname\" : \"Max\",",
					"    \"lastname\" : \"Mustermann\",",
					"    \"totalprice\" : 111,",
					"    \"depositpaid\" : true,",
					"    \"bookingdates\" : {",
					"        \"checkin\" : \"2022-01-01\",",
					"        \"checkout\" : \"2022-01-10\"",
					"    },",
					"    \"additionalneeds\" : \"Breakfast\"",
					"};",
					"pm.collectionVariables.set(\"new_booking\", JSON.stringify(booking));",
					"",
					"var wrong_booking = {",
					"    \"firstname\" : \"Max\",",
					"    \"lastname\" : \"Mustermann\",",
					"    \"totalprice\" : 111,",
					"    \"depositpaid\" : true,",
					"    \"bookingdates\" : {",
					"        \"checkin\" : \"wrongFormat\",",
					"        \"checkout\" : \"2022-01-10\"",
					"    },",
					"    \"additionalneeds\" : \"Breakfast\"",
					"};",
					"pm.collectionVariables.set(\"wrong_booking\", JSON.stringify(wrong_booking));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "27814527-8820-4d11-b031-4686db7f578d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "fa67baf0-8499-4327-9187-bb04a10398bc",
			"key": "host",
			"value": "https://restful-booker.herokuapp.com"
		},
		{
			"id": "82ac116b-7d38-4ef2-b258-4cc3358e778b",
			"key": "booking_id",
			"value": "1"
		},
		{
			"id": "42351e4e-06d5-4f9e-aeff-ff03bc52999f",
			"key": "new_booking",
			"value": ""
		},
		{
			"id": "e9d922fc-6519-4c59-a957-12ebfd096f86",
			"key": "username",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "f519f43a-dc51-4d3d-97fe-202bf72d7c31",
			"key": "password",
			"value": "password123",
			"type": "string"
		},
		{
			"id": "9304c89d-5407-4460-ba8c-bc7058829265",
			"key": "token",
			"value": "token=abc123",
			"type": "string"
		},
		{
			"id": "d3a2c414-b742-46f6-9eb1-3e42cc5913d7",
			"key": "wrong_booking",
			"value": ""
		}
	]
}