{
	"info": {
		"_postman_id": "0f602742-5c1c-4e84-bb15-bbe3c29e9f42",
		"name": "Restful-Booker",
		"description": "# Welcome to Restful-Booker!\n\n***Can you find all the bugs in this API?***\n\nWelcome to Restful-booker an API that you can use to learn more about API Testing or try out API testing tools against. Restful-booker is a **C**reate **R**ead **U**pdate **D**elete Web API that comes with authentication features and loaded with a bunch of bugs for you to explore.\n\n## Where is the API?\n\nYou can find the code for Restful-booker on GitHub here: [https://github.com/mwinteringham/restful-booker](https://github.com/mwinteringham/restful-booker)\n\nYou can find a deployed instance at [https://restful-booker.herokuapp.com/](https://restful-booker.herokuapp.com/)\n\nThe API comes pre-loaded with 10 records for you to work with **and resets itself every 10 minutes back to that default state.** It also comes with [detailed API documentation](https://restful-booker.herokuapp.com/apidoc/index.html) to help get you started with your API testing straight away.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "/ping - HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84101e73-eca2-4e88-b25c-7d2b97e1d97e",
						"exec": [
							"pm.test(\"Ping is successful\", function () {\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string 'Created'\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2a5d3cd1-de4c-473d-9800-276c869868ab",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{host}}/ping",
				"description": "A simple GET request that informs us whether the API is up and running."
			},
			"response": []
		},
		{
			"name": "/booking - GetBookingIds (Query all IDs)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee56ad3e-f360-42af-a248-1a018af354dd",
						"exec": [
							"pm.test(\"Response has to be status 200\", function () {\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has to be an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response array length has to be > 0\", function () {\r",
							"    pm.expect(pm.response.json().length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have to inlcude only one key\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(Object.keys(element).length).to.be.equal(1);\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have to inlcude the key bookingid\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(element).to.have.property('bookingid');\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements values have to be numbers\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(element.bookingid).to.be.a('number');\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array has to be empty\", ()=>{\r",
							"  for(const element of pm.response.json()){\r",
							"        pm.sendRequest({            \r",
							"            url: 'https://restful-booker.herokuapp.com/booking/' + element.bookingid,\r",
							"            method: 'DELETE',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json',\r",
							"                },\r",
							"            body: {}    \r",
							"        }, function (err, response) {    \r",
							"            pm.sendRequest({            \r",
							"                url: 'https://restful-booker.herokuapp.com/booking',\r",
							"                method: 'GET',\r",
							"                header: {\r",
							"                    'Content-Type': 'application/json',\r",
							"                    },\r",
							"                body: {}    \r",
							"            }, function (err, response) {    \r",
							"                pm.expect(response.json().length).to.be.eq(0)\r",
							"            })\r",
							"        })\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c5d78c4d-ecaa-4014-8f75-05f4d1842b3f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{host}}/booking",
				"description": "Requests the IDs for all existing bookings that exist within the API"
			},
			"response": []
		},
		{
			"name": "/booking - GetBookingIds (Filter by name)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3770e31f-3bc4-4af0-be45-15842c9957f4",
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/booking',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"          },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({    \"firstname\": \"Harry\",\r",
							"    \"lastname\": \"Potter\",\r",
							"    \"totalprice\": 999,\r",
							"    \"depositpaid\": true,\r",
							"    \"bookingdates\": {\r",
							"      \"checkin\": \"2018-01-01\",\r",
							"      \"checkout\": \"2019-01-01\"\r",
							"    },\r",
							"    \"additionalneeds\": \"Winkelgasse\"})\r",
							"    }    \r",
							"}, function (err, response) {\r",
							"    //console.error(err);\r",
							"    console.log(response.json());\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1a1585c0-5534-46ec-91c1-658e1bb50ae8",
						"exec": [
							"pm.test(\"Response has to be status 200\", function () {\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has to be an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have to inlcude only one key\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(Object.keys(element).length).to.be.equal(1);\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have to inlcude the key bookingid\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(element).to.have.property('bookingid');\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have values have to be numbers\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(element.bookingid).to.be.a('number');\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have to have corresponding bookings with data 'Harry Potter'\", function () {    \r",
							"    for(const element of pm.response.json()){\r",
							"        console.log(element.bookingid);\r",
							"        pm.sendRequest({            \r",
							"    url: 'https://restful-booker.herokuapp.com/booking/' + element.bookingid,\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"          },\r",
							"    body: {}    \r",
							"}, function (err, response) {    \r",
							"    pm.expect((response.json()).firstname).to.be.equal(\"Harry\");\r",
							"    pm.expect((response.json()).lastname).to.be.equal(\"Potter\");\r",
							"})\r",
							"    }    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "b9dc92d0-3bfc-4113-bac7-57ad5f75c22a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/booking?firstname=Harry&lastname=Potter",
					"host": [
						"{{host}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "Harry"
						},
						{
							"key": "lastname",
							"value": "Potter"
						}
					]
				},
				"description": "Requests all Booking IDs that match the firstname AND lastname provided in the query string. You can also query by firstname or lastname alone."
			},
			"response": []
		},
		{
			"name": "/booking - GetBookingIds (Filter by date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ee8ea25-4a14-4df5-bf5b-7c4132cb53f8",
						"exec": [
							"pm.test(\"Response has to be status 200\", function () {\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has to be an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have to inlcude only one key\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(Object.keys(element).length).to.be.equal(1);\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have to inlcude the key bookingid\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(element).to.have.property('bookingid');\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have values have to be numbers\", function () {\r",
							"    for(const element of pm.response.json()){\r",
							"        pm.expect(element.bookingid).to.be.a('number');\r",
							"    }    \r",
							"});\r",
							"\r",
							"pm.test(\"Response array elements have to have corresponding bookings with data 'Harry Potter'\", function () {    \r",
							"    for(const element of pm.response.json()){\r",
							"        console.log(element.bookingid);\r",
							"        pm.sendRequest({            \r",
							"    url: 'https://restful-booker.herokuapp.com/booking/' + element.bookingid,\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"          },\r",
							"    body: {}    \r",
							"}, function (err, response) {    \r",
							"    pm.expect((response.json()).firstname).to.be.equal(\"Harry\");\r",
							"    pm.expect((response.json()).lastname).to.be.equal(\"Potter\");\r",
							"})\r",
							"    }    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e24f6a3f-5022-4754-9c23-5d44ac9e6629",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/booking?checkin=2022-01-01&checkout=2022-01-31",
					"host": [
						"{{host}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "2022-01-01"
						},
						{
							"key": "checkout",
							"value": "2022-01-31"
						}
					]
				},
				"description": "Requests all Booking IDs that are within the checkin AND checkout provided in the query string. You can also query by checking or checkout alone."
			},
			"response": []
		},
		{
			"name": "/booking/:id - GetBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "644db54b-1929-4bc9-a15e-9419e09ff2bb",
						"exec": [
							"pm.test(\"Response has to be status 200\", function () {\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has to be json\", function () {\r",
							"    pm.response.to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has to have the corresponding name 'Harry Potter'\", function () {\r",
							"   pm.expect((pm.response.json()).firstname).to.be.equal(\"Harry\");\r",
							"   pm.expect((pm.response.json()).lastname).to.be.equal(\"Potter\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "36a9830d-5391-4e17-abc4-68ddce32a986",
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/booking',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"          },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({    \"firstname\": \"Harry\",\r",
							"    \"lastname\": \"Potter\",\r",
							"    \"totalprice\": 999,\r",
							"    \"depositpaid\": true,\r",
							"    \"bookingdates\": {\r",
							"      \"checkin\": \"1972-01-01\",\r",
							"      \"checkout\": \"1973-01-01\"\r",
							"    },\r",
							"    \"additionalneeds\": \"Winkelgasse\"})\r",
							"    }    \r",
							"}, function (err, response) {\r",
							"    //console.error(err);\r",
							"    console.log(response.json());\r",
							"    pm.environment.set(\"booking_id\", response.json().bookingid);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5666caf6-9e57-465a-bb4e-11311c3cab60",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{host}}/booking/{{booking_id}}",
				"description": "Requests a specific booking that exists within the API. To get a list of valid booking IDs using GetBookingIds calls."
			},
			"response": []
		},
		{
			"name": "/booking - CreateBooking (JSON)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1085f03-344b-49ae-9504-04db92170763",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response booking is correct\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.bookingid).to.be.a(\"number\");\r",
							"    var expectedBooking = JSON.parse(pm.collectionVariables.get(\"new_booking\"));\r",
							"    pm.expect(data.booking.firstname).to.eql(expectedBooking.firstname);\r",
							"    pm.expect(data.booking.lastname).to.eql(expectedBooking.lastname);\r",
							"    pm.expect(data.booking.totalprice).to.eql(expectedBooking.totalprice);\r",
							"    pm.expect(data.booking.depositpaid).to.eql(expectedBooking.depositpaid);\r",
							"    pm.expect(data.booking.bookingdates.checkin).to.eql(expectedBooking.bookingdates.checkin);\r",
							"    pm.expect(data.booking.bookingdates.checkout).to.eql(expectedBooking.bookingdates.checkout);\r",
							"    pm.expect(data.booking.additionalneeds).to.eql(expectedBooking.additionalneeds);\r",
							"});\r",
							"\r",
							"// try to create empty booking \r",
							"const createEmptyBooking = {\r",
							"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
							"  method: 'POST',\r",
							"  header: 'Content-Type:application/json',\r",
							"  body: {} \r",
							"};\r",
							"\r",
							"pm.sendRequest(createEmptyBooking, function (err, response) {\r",
							"    pm.test(\"Create empty booking returns 500\", function () {\r",
							"        pm.expect(response.code).to.be.equal(500);\r",
							"        pm.expect(response.status).to.be.equal(\"Internal Server Error\")\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "4752668a-2685-44d2-820f-6b5d2fb0304b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{new_booking}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{host}}/booking",
				"description": "Request that allows you to create a Booking within the API. This request creates the booking using JSON."
			},
			"response": []
		},
		{
			"name": "/booking - CreateBooking (XML)",
			"id": "3bd52893-19ff-4053-9a31-616e5f4c9d72",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/xml"
					},
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<booking>\n    <firstname>Jim</firstname>\n    <lastname>Brown</lastname>\n    <totalprice>111</totalprice>\n    <depositpaid>true</depositpaid>\n    <bookingdates>\n      <checkin>2018-01-01</checkin>\n      <checkout>2019-01-01</checkout>\n    </bookingdates>\n    <additionalneeds>Breakfast</additionalneeds>\n  </booking>"
				},
				"url": "{{host}}/booking",
				"description": "Request that allows you to create a Booking within the API. This request creates the booking using XML."
			},
			"response": []
		},
		{
			"name": "/booking - CreateBooking (URL)",
			"id": "38c72576-e166-40a0-aa47-e47f6aee25a7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstname",
							"value": "Jim",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Brown",
							"type": "text"
						},
						{
							"key": "totalprice",
							"value": "111",
							"type": "text"
						},
						{
							"key": "depositpaid",
							"value": "true",
							"type": "text"
						},
						{
							"key": "bookingdates[checkin]",
							"value": "2018-01-01",
							"type": "text"
						},
						{
							"key": "bookingdates[checkout]",
							"value": "2018-01-02",
							"type": "text"
						}
					]
				},
				"url": "{{host}}/booking",
				"description": "Request that allows you to create a Booking within the API. This request creates the booking using urlencoded."
			},
			"response": []
		},
		{
			"name": "/auth - CreateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c95eb4d-be9e-4ea0-b656-ecefa07ab78b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f0937860-1da1-47d6-b8f7-0274a070dc83",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}"
				},
				"url": "{{host}}/auth",
				"description": "Sending a request to this endpoint will generate a token that can be used in the Cookie header for PUT /booking/{id} and DELETE /booking/{id}"
			},
			"response": []
		},
		{
			"name": "/booking/:id - UpdateBooking (JSON)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5f4dea90-9a8f-403c-8418-6e649fa3b68e",
						"exec": [
							"const createBooking = {\r",
							"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
							"  method: 'POST',\r",
							"  header: 'Content-Type:application/json',\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: pm.collectionVariables.get(\"new_booking\")\r",
							"  }\r",
							"};\r",
							"pm.sendRequest(createBooking, function (err, res) {\r",
							"    pm.expect(err).is.null;\r",
							"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8f46b241-227c-49b9-886f-447d27cd4c0e",
						"exec": [
							"const updatedBooking = {\r",
							"    \"firstname\": \"Erika\",\r",
							"    \"lastname\": \"Musterfrau\",\r",
							"    \"totalprice\": 222,\r",
							"    \"depositpaid\": false,\r",
							"    \"bookingdates\": {\r",
							"      \"checkin\": \"2023-01-01\",\r",
							"      \"checkout\": \"2023-01-10\"\r",
							"    },\r",
							"    \"additionalneeds\": \"Fastbreak\"     \r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response booking is correct\", function () {\r",
							"    var data = pm.response.json();\r",
							"    var expectedBooking = updatedBooking;\r",
							"    pm.expect(data.firstname).to.eql(expectedBooking.firstname);\r",
							"    pm.expect(data.lastname).to.eql(expectedBooking.lastname);\r",
							"    pm.expect(data.totalprice).to.eql(expectedBooking.totalprice);\r",
							"    pm.expect(data.depositpaid).to.eql(expectedBooking.depositpaid);\r",
							"    pm.expect(data.bookingdates.checkin).to.eql(expectedBooking.bookingdates.checkin);\r",
							"    pm.expect(data.bookingdates.checkout).to.eql(expectedBooking.bookingdates.checkout);\r",
							"    pm.expect(data.additionalneeds).to.eql(expectedBooking.additionalneeds);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f403693e-5396-4191-946b-4f753107da07",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "password123",
						"username": "admin"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\": \"Erika\",\n    \"lastname\": \"Musterfrau\",\n    \"totalprice\": 222,\n    \"depositpaid\": false,\n    \"bookingdates\": {\n      \"checkin\": \"2023-01-01\",\n      \"checkout\": \"2023-01-10\"\n    },\n    \"additionalneeds\": \"Fastbreak\"     \n}\n"
				},
				"url": "{{host}}/booking/{{booking_id}}",
				"description": "Request that allows you to update a complete Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
			},
			"response": []
		},
		{
			"name": "/booking/:id - UpdateBooking (XML)",
			"id": "4ed909f1-3859-45c3-97ce-26543104cb93",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "",
						"username": ""
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/xml"
					},
					{
						"key": "Accept",
						"value": "application/xml"
					},
					{
						"key": "Cookie",
						"value": "token=abc123",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<booking>\n    <firstname>James</firstname>\n    <lastname>Brown</lastname>\n    <totalprice>111</totalprice>\n    <depositpaid>true</depositpaid>\n    <bookingdates>\n      <checkin>2018-01-01</checkin>\n      <checkout>2019-01-01</checkout>\n    </bookingdates>\n    <additionalneeds>Breakfast</additionalneeds>\n  </booking>"
				},
				"url": "{{host}}/booking/1",
				"description": "Request that allows you to update a complete Booking within the API. This request updates the booking using XML.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
			},
			"response": []
		},
		{
			"name": "/booking/:id - UpdateBooking (URL)",
			"id": "84c6e9a9-6be1-4bb7-94af-dd63acd991c0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "",
						"username": ""
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Cookie",
						"value": "token=abc123",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstname",
							"value": "Jim",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Brown",
							"type": "text"
						},
						{
							"key": "totalprice",
							"value": "111",
							"type": "text"
						},
						{
							"key": "depositpaid",
							"value": "true",
							"type": "text"
						},
						{
							"key": "bookingdates[checkin]",
							"value": "2018-01-01",
							"type": "text"
						},
						{
							"key": "bookingdates[checkout]",
							"value": "2018-01-02",
							"type": "text"
						}
					]
				},
				"url": "{{host}}/booking/1",
				"description": "Request that allows you to update a complete Booking within the API. This request updates the booking using URL.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
			},
			"response": []
		},
		{
			"name": "/booking/:id - PartialUpdateBooking (JSON)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "579fbc47-542e-468b-a45c-f42791c7ef66",
						"exec": [
							"const createBooking = {\r",
							"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
							"  method: 'POST',\r",
							"  header: 'Content-Type:application/json',\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: pm.collectionVariables.get(\"new_booking\")\r",
							"  }\r",
							"};\r",
							"pm.sendRequest(createBooking, function (err, res) {\r",
							"    pm.expect(err).is.null;\r",
							"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a6c4156-1a6a-4842-bdfc-48c79fe48ace",
						"exec": [
							"const updatedBooking = {\r",
							"    \"firstname\": \"Erika\",\r",
							"    \"lastname\": \"Musterfrau\",    \r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response booking is correct\", function () {\r",
							"    var data = pm.response.json();\r",
							"    var expectedBooking = updatedBooking;\r",
							"    pm.expect(data.firstname).to.eql(expectedBooking.firstname);\r",
							"    pm.expect(data.lastname).to.eql(expectedBooking.lastname);\r",
							"    expectedBooking = JSON.parse(pm.collectionVariables.get(\"new_booking\"));\r",
							"    pm.expect(data.totalprice).to.eql(expectedBooking.totalprice);\r",
							"    pm.expect(data.depositpaid).to.eql(expectedBooking.depositpaid);\r",
							"    pm.expect(data.bookingdates.checkin).to.eql(expectedBooking.bookingdates.checkin);\r",
							"    pm.expect(data.bookingdates.checkout).to.eql(expectedBooking.bookingdates.checkout);\r",
							"    pm.expect(data.additionalneeds).to.eql(expectedBooking.additionalneeds);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ee3aa7fb-31c0-4551-8fac-ed5a29e73522",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "password123",
						"username": "admin"
					}
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"Erika\",\n    \"lastname\" : \"Musterfrau\"\n}"
				},
				"url": "{{host}}/booking/{{booking_id}}",
				"description": "Request that allows you to update a partial section of a Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
			},
			"response": []
		},
		{
			"name": "/booking/:id - PartialUpdateBooking (XML)",
			"id": "5fc5762d-9a85-4429-88ec-101fce99aaae",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "",
						"username": ""
					}
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/xml"
					},
					{
						"key": "Accept",
						"value": "application/xml"
					},
					{
						"key": "Cookie",
						"value": "token=abc123",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<booking>\n    <firstname>James</firstname>\n    <lastname>Brown</lastname>\n  </booking>"
				},
				"url": "{{host}}/booking/1",
				"description": "Request that allows you to update a partial section of a Booking within the API. This request updates the booking using XML.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
			},
			"response": []
		},
		{
			"name": "/booking/:id - PartialUpdateBooking (URL)",
			"id": "534c6e05-0ffc-4afc-a1fd-69075d9e33b3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "",
						"username": ""
					}
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Cookie",
						"value": "token=abc123",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstname",
							"value": "Jim",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Brown",
							"type": "text"
						}
					]
				},
				"url": "{{host}}/booking/1",
				"description": "Request that allows you to update a partial section of a Booking within the API. This request updates the booking using URL.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
			},
			"response": []
		},
		{
			"name": "/booking/:id - DeleteBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ffdb0a20-47f2-4f09-b960-d76bb93d179b",
						"exec": [
							"// create the base booking\r",
							"const createBooking = {\r",
							"  url: pm.collectionVariables.get(\"host\") + \"/booking\",\r",
							"  method: 'POST',\r",
							"  header: 'Content-Type:application/json',\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: pm.collectionVariables.get(\"new_booking\")\r",
							"  }\r",
							"};\r",
							"pm.sendRequest(createBooking, function (err, res) {\r",
							"    pm.expect(err).is.null;\r",
							"    pm.collectionVariables.set(\"booking_id\", res.json().bookingid);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "836ad683-1f44-4922-aa9c-5bd646f47888",
						"exec": [
							"pm.test(\"Status code name has string 'Created'\", function () {\r",
							"  pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// try to GET deleted booking\r",
							"const getBooking = {\r",
							"  url: pm.collectionVariables.get(\"host\") + \"/booking/\" + pm.collectionVariables.get(\"booking_id\"),\r",
							"  method: 'GET',\r",
							"  header: 'Content-Type:application/json'\r",
							"};\r",
							"\r",
							"pm.sendRequest(getBooking, function (err, response) {\r",
							"    pm.test(\"Get request with deleted bookingId returns 404\", function () {\r",
							"        pm.expect(response.code).to.be.equal(404);\r",
							"        pm.expect(response.status).to.be.equal(\"Not Found\")\r",
							"    });\r",
							"});\r",
							"\r",
							"// try to delete a non existing booking \r",
							"const deleteBooking = {\r",
							"  url: pm.collectionVariables.get(\"host\") + \"/booking/\" + pm.collectionVariables.get(\"booking_id\"),\r",
							"  method: 'DELETE',\r",
							"  header: 'Authorization: Basic ' + btoa('admin:password123')\r",
							"};\r",
							"\r",
							"pm.sendRequest(deleteBooking, function (err, response) {\r",
							"    pm.test(\"Delete non existing booking returns 405\", function () {\r",
							"        pm.expect(response.code).to.be.equal(405);\r",
							"        pm.expect(response.status).to.be.equal(\"Method Not Allowed\")\r",
							"    });\r",
							"});\r",
							"\r",
							"// try to delete without authorization\r",
							"const deleteBookingWithoutAuth = {\r",
							"  url: pm.collectionVariables.get(\"host\") + \"/booking/\" + pm.collectionVariables.get(\"booking_id\"),\r",
							"  method: 'DELETE'\r",
							"};\r",
							"\r",
							"pm.sendRequest(deleteBookingWithoutAuth, function (err, response) {\r",
							"    pm.test(\"Delete without authorization returns 403\", function () {\r",
							"        pm.expect(response.code).to.be.equal(403);\r",
							"        pm.expect(response.status).to.be.equal(\"Forbidden\")\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5f39fd47-b68f-48fc-95a0-48ad47817f90",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "admin",
						"password": "password123"
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"url": "{{host}}/booking/{{booking_id}}",
				"description": "Request that allows you to delete a Booking within the API.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f613683c-99ce-4aaf-a3de-d14fdb555a09",
				"type": "text/javascript",
				"exec": [
					"var booking = {",
					"    \"firstname\" : \"Max\",",
					"    \"lastname\" : \"Mustermann\",",
					"    \"totalprice\" : 111,",
					"    \"depositpaid\" : true,",
					"    \"bookingdates\" : {",
					"        \"checkin\" : \"2022-01-01\",",
					"        \"checkout\" : \"2022-01-10\"",
					"    },",
					"    \"additionalneeds\" : \"Breakfast\"",
					"};",
					"pm.collectionVariables.set(\"new_booking\", JSON.stringify(booking));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0a1e0557-9586-45f5-8849-bc78d8551524",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "29956403-fc1c-4625-b8be-794672a30d3e",
			"key": "host",
			"value": "https://restful-booker.herokuapp.com"
		},
		{
			"id": "b4ea1517-3c90-4cc6-9db0-da9967a94c5f",
			"key": "booking_id",
			"value": "1"
		},
		{
			"id": "aa8cdaac-1587-41b3-910a-528e1d729e66",
			"key": "new_booking",
			"value": ""
		}
	]
}